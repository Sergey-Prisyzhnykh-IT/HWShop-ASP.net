@page "/showBasket"
@using System.Text
@using System.Collections.Concurrent
@using Blazored.Toast
@using Blazored.Toast.Services
@using Blazored.Toast.Configuration
@using HW2OnlineShop
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage


<h3>Корзина</h3>
<link href="_content/Blazored.Toast/blazored-toast.min.css" rel="stylesheet" />

@foreach (var p in _basket)
{
    <div>@p.Key.Name</div>
    <img src="@p.Key.urlImage" alt="Image"/>
    <div>@p.Key.Price</div> 
    <div>
        <a href="@p.Key.moreDetails">Подробнее</a>
     </div>

<div>
    <button @onclick="@(() => AddToBasket(p.Key.Name))" >
        +
    </button>
    <span class="count">
       @HowCountProduct(p.Key.Name)
    </span>
    <button @onclick="@(() => RemoveFromBasket(p.Key.Name))">
        -
    </button>
</div>
}

@if (_basketLast != null)
{
    <div>Прошлые заказы</div>

    foreach (var bl in _basketLast)
    {
        var temp = products.First(x => x.Name == bl.Key);
        <div>@temp.Name</div>
        <img src="@temp.urlImage" alt="Image"/>
        <div>@temp.Price</div>
        <div><a href="@temp.moreDetails">Подробнее</a></div>
        <div>@bl.Value</div>
    }
}


<div>
    <button @onclick="@Clear">
        Очистить Корзину
    </button>
</div>



@inject HWShop_ASP.net.Product.IBasket  Basket;
@inject IToastService ToastService;
@inject ProtectedLocalStorage _localStorage
@inject IProductCatalog ProductCatalog

@code {

    ConcurrentDictionary<HW2OnlineShop.Product, int> _basket;
    ConcurrentDictionary<string, int> _basketLast;
    IReadOnlyCollection<HW2OnlineShop.Product> products;


    protected override void OnInitialized()
    {
        _basket = Basket.ShowBusket();
        products = ProductCatalog.GetProductCatalog();

    }

    private void Clear()
    {
        ToastService.ShowSuccess("Корзина очищена!", ":)");
        Basket.Clear();
    }

    private void AddToBasket(string name)
    {
        Basket.AddProduct(name);
        HowCountProduct(name);
    }

    private void RemoveFromBasket(string name)
    {
        Basket.DeleteProduct(name);
        HowCountProduct(name);
    }

    private int HowCountProduct(string name)
    {
        var temp = Basket.GetProductCount(name);
        return Basket.GetProductCount(name);
    }
    /// <summary>
    /// По не понятным причинам не хочет работать если добовлять продукт, работает только со стандартными типами
    /// накостылил так
    /// </summary>
    /// <param name="firstRender"></param>
    /// <returns></returns>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            var result = await _localStorage.GetAsync<ConcurrentDictionary<string, int>>("basket");
            if (result.Success)
            {
                _basketLast = result.Value;
                StateHasChanged();
            }          

         }
    }

}
